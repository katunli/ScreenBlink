name: Build and Release

on:
  push:
    branches: [ main ]

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Verify shape predictor file exists
        run: |
          if [ ! -f "electron/assets/models/shape_predictor_68_face_landmarks.dat" ]; then
            echo "Shape predictor file not found!"
            echo "Current directory: $(pwd)"
            echo "Contents of electron/assets/models/:"
            ls -la electron/assets/models/ || true
            exit 1
          fi
          echo "Shape predictor file found successfully"
          echo "File size: $(stat -f%z electron/assets/models/shape_predictor_68_face_landmarks.dat) bytes"

      - name: Setup Python environment
        run: |
          cd python
          chmod +x setup.sh
          ./setup.sh

      - name: Install coreutils (for timeout command)
        run: |
          brew install coreutils

      - name: Build Python binary
        run: |
          cd python
          chmod +x build_and_install.sh
          ./build_and_install.sh

      - name: Verify binary was built correctly
        run: |
          echo "üîç Verifying binary build..."
          
          # Check if binary exists
          if [ ! -f "python/dist/blink_detector" ]; then
            echo "‚ùå Binary not found at python/dist/blink_detector"
            ls -la python/dist/ || true
            exit 1
          fi
          
          # Check binary size (should be around 117MB)
          BINARY_SIZE=$(stat -f%z python/dist/blink_detector)
          echo "üì¶ Binary size: $BINARY_SIZE bytes ($(($BINARY_SIZE / 1024 / 1024))MB)"
          
          if [ $BINARY_SIZE -lt 50000000 ]; then
            echo "‚ùå Binary seems too small (less than 50MB). Build may have failed."
            exit 1
          fi
          
          # Check if binary is executable
          if [ ! -x "python/dist/blink_detector" ]; then
            echo "‚ùå Binary is not executable"
            ls -la python/dist/blink_detector
            exit 1
          fi
          
          # Check if binary was installed to Electron resources
          if [ ! -f "electron/resources/blink_detector" ]; then
            echo "‚ùå Binary not installed to electron/resources/blink_detector"
            ls -la electron/resources/ || true
            exit 1
          fi
          
          echo "‚úÖ Binary verification passed!"

      - name: Test binary functionality
        run: |
          echo "üß™ Testing binary functionality..."
          cd python
          
          # Copy the model file to the expected location for testing
          mkdir -p dist/assets/models
          cp ../electron/assets/models/shape_predictor_68_face_landmarks.dat dist/assets/models/
          
          # Test that binary can start and doesn't crash immediately
          # In CI environment, camera will fail to initialize, which is expected
          timeout 10s ./dist/blink_detector > test_output.log 2>&1 || {
            # Check if it's just a timeout (which is expected) or an actual error
            if [ $? -eq 124 ]; then
              echo "‚úÖ Binary started successfully (timeout is expected without camera)"
            else
              echo "Test output:"
              cat test_output.log || true
              # Check if the error is just camera initialization failure (which is expected in CI)
              if grep -q "Failed to open camera" test_output.log; then
                echo "‚úÖ Binary started successfully (camera failure is expected in CI environment)"
              else
                echo "‚ùå Binary failed to start or crashed with unexpected error"
                exit 1
              fi
            fi
          }
          
          echo "‚úÖ Binary functionality test passed!"

      - name: Build macOS app
        run: npm run build

      - name: Verify macOS app artifacts
        run: |
          echo "üîç Verifying macOS app artifacts..."
          
          # Check if DMG was created (with correct naming for ARM64)
          if [ ! -f "dist/ScreenBlink-1.0.0-arm64.dmg" ]; then
            echo "‚ùå DMG file not found"
            ls -la dist/ || true
            exit 1
          fi
          
          # Check if ZIP was created (with correct naming for ARM64)
          if [ ! -f "dist/ScreenBlink-1.0.0-arm64-mac.zip" ]; then
            echo "‚ùå ZIP file not found"
            ls -la dist/ || true
            exit 1
          fi
          
          # Check file sizes
          DMG_SIZE=$(stat -f%z dist/ScreenBlink-1.0.0-arm64.dmg)
          ZIP_SIZE=$(stat -f%z dist/ScreenBlink-1.0.0-arm64-mac.zip)
          
          echo "üì¶ DMG size: $DMG_SIZE bytes ($(($DMG_SIZE / 1024 / 1024))MB)"
          echo "üì¶ ZIP size: $ZIP_SIZE bytes ($(($ZIP_SIZE / 1024 / 1024))MB)"
          
          if [ $DMG_SIZE -lt 100000000 ]; then
            echo "‚ùå DMG seems too small (less than 100MB). Build may have failed."
            exit 1
          fi
          
          echo "‚úÖ macOS app artifacts verification passed!"

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ScreenBlink-macOS-v1.0.0
          path: |
            dist/ScreenBlink-1.0.0-arm64.dmg
            dist/ScreenBlink-1.0.0-arm64-mac.zip

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Verify shape predictor file exists
        run: |
          if (!(Test-Path "electron/assets/models/shape_predictor_68_face_landmarks.dat")) {
            Write-Error "Shape predictor file not found!"
            Write-Host "Current directory: $(Get-Location)"
            Write-Host "Contents of electron/assets/models/:"
            Get-ChildItem "electron/assets/models/" -ErrorAction SilentlyContinue
            exit 1
          }
          Write-Host "Shape predictor file found successfully"
          Write-Host "File size: $((Get-Item 'electron/assets/models/shape_predictor_68_face_landmarks.dat').Length) bytes"

      - name: Cache pip wheels
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            %LOCALAPPDATA%\pip\Cache
            python/venv
          key: ${{ runner.os }}-pip-${{ hashFiles('python/requirements.txt') }}-${{ hashFiles('python/setup.bat') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ hashFiles('python/requirements.txt') }}-
            ${{ runner.os }}-pip-

      - name: Debug cache status
        run: |
          Write-Host "Cache debugging information:"
          Write-Host "Checking if virtual environment exists:"
          if (Test-Path "python/venv") {
            Write-Host "OK: Virtual environment exists"
            Write-Host "Virtual environment size: $((Get-ChildItem 'python/venv' -Recurse | Measure-Object -Property Length -Sum).Sum) bytes"
          } else {
            Write-Host "Virtual environment does not exist"
          }
          Write-Host "Checking pip cache directories:"
          if (Test-Path "$env:LOCALAPPDATA\pip\Cache") {
            Write-Host "OK: Pip cache exists"
            Write-Host "Pip cache size: $((Get-ChildItem '$env:LOCALAPPDATA\pip\Cache' -Recurse | Measure-Object -Property Length -Sum).Sum) bytes"
          } else {
            Write-Host "Pip cache does not exist"
          }

      - name: Cache PyInstaller
        uses: actions/cache@v4
        with:
          path: |
            python/build/
            python/dist/
            %LOCALAPPDATA%\pyinstaller
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('python/blink_detector.py', 'python/blink_detector.spec') }}
          restore-keys: |
            ${{ runner.os }}-pyinstaller-

      - name: Setup Python environment
        run: |
          cd python
          .\setup.bat

      - name: Debug before build
        run: |
          Write-Host "Debugging before build..."
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Python version:"
          python --version
          Write-Host "Contents of python directory:"
          Get-ChildItem "python/" -ErrorAction SilentlyContinue
          Write-Host "Contents of python/dist/ (if exists):"
          Get-ChildItem "python/dist/" -ErrorAction SilentlyContinue
          Write-Host "Contents of electron/assets/models/:"
          Get-ChildItem "electron/assets/models/" -ErrorAction SilentlyContinue

      - name: Build Python binary
        run: |
          cd python
          .\build_and_install.bat

      - name: Debug after build
        run: |
          Write-Host "üîç Debugging after build..."
          Write-Host "Contents of python/dist/:"
          Get-ChildItem "python/dist/" -ErrorAction SilentlyContinue
          Write-Host "Contents of electron/resources/:"
          Get-ChildItem "electron/resources/" -ErrorAction SilentlyContinue

      - name: Verify binary was built correctly
        run: |
          Write-Host "üîç Verifying binary build..."
          
          # Check if binary exists
          if (!(Test-Path "python/dist/blink_detector.exe")) {
            Write-Error "Binary not found at python/dist/blink_detector.exe"
            Get-ChildItem "python/dist/" -ErrorAction SilentlyContinue
            exit 1
          }
          
          # Check binary size (should be around 117MB)
          $BINARY_SIZE = (Get-Item "python/dist/blink_detector.exe").Length
          Write-Host "üì¶ Binary size: $BINARY_SIZE bytes ($([math]::Round($BINARY_SIZE / 1MB, 2))MB)"
          
          if ($BINARY_SIZE -lt 50000000) {
            Write-Error "Binary seems too small (less than 50MB). Build may have failed."
            exit 1
          }
          
          # Check if binary was installed to Electron resources
          if (!(Test-Path "electron/resources/blink_detector.exe")) {
            Write-Error "Binary not installed to electron/resources/blink_detector.exe"
            Get-ChildItem "electron/resources/" -ErrorAction SilentlyContinue
            exit 1
          }
          
          Write-Host "‚úÖ Binary verification passed!"

      - name: Test binary functionality
        run: |
          Write-Host "üß™ Testing binary functionality..."
          cd python
          
          # Copy the model file to the expected location for testing
          New-Item -ItemType Directory -Force -Path "dist\assets\models" | Out-Null
          Copy-Item "..\electron\assets\models\shape_predictor_68_face_landmarks.dat" "dist\assets\models\"
          
          # Test that binary can start and doesn't crash immediately
          $process = Start-Process -FilePath ".\dist\blink_detector.exe" -ArgumentList @() -PassThru -NoNewWindow
          
          # Wait a bit to see if it crashes
          Start-Sleep -Seconds 3
          
          if ($process.HasExited) {
            $exitCode = $process.ExitCode
            Write-Error "Binary exited with code: $exitCode"
            exit 1
          }
          
          # Kill the process
          $process.Kill()
          Write-Host "‚úÖ Binary functionality test passed!"

      - name: Build Windows app
        run: npm run build

      - name: Verify Windows app artifacts
        run: |
          Write-Host "üîç Verifying Windows app artifacts..."
          
          # Check if EXE was created
          if (!(Test-Path "dist/ScreenBlink Setup 1.0.0.exe")) {
            Write-Error "EXE file not found"
            Get-ChildItem "dist/" -ErrorAction SilentlyContinue
            exit 1
          }
          
          # Check if ZIP was created
          if (!(Test-Path "dist/ScreenBlink-1.0.0-win.zip")) {
            Write-Error "ZIP file not found"
            Get-ChildItem "dist/" -ErrorAction SilentlyContinue
            exit 1
          }
          
          # Check file sizes
          $EXE_SIZE = (Get-Item "dist/ScreenBlink Setup 1.0.0.exe").Length
          $ZIP_SIZE = (Get-Item "dist/ScreenBlink-1.0.0-win.zip").Length
          
          Write-Host "üì¶ EXE size: $EXE_SIZE bytes ($([math]::Round($EXE_SIZE / 1MB, 2))MB)"
          Write-Host "üì¶ ZIP size: $ZIP_SIZE bytes ($([math]::Round($ZIP_SIZE / 1MB, 2))MB)"
          
          if ($EXE_SIZE -lt 100000000) {
            Write-Error "EXE seems too small (less than 100MB). Build may have failed."
            exit 1
          }
          
          Write-Host "‚úÖ Windows app artifacts verification passed!"

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ScreenBlink-Windows-v1.0.0
          path: |
            dist/ScreenBlink Setup 1.0.0.exe
            dist/ScreenBlink-1.0.0-win.zip 