name: Build Executables

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.11.0'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.3'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Python dependencies
      run: |
        cd python
        python -m venv venv
        venv\Scripts\activate
        pip install -r requirements.txt
        cd ..
        
    - name: Verify shape predictor file exists
      run: |
        if (!(Test-Path "electron/assets/models/shape_predictor_68_Ë†face_landmarks.dat")) {
          Write-Error "Shape predictor file not found!"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Contents of electron/assets/models/:"
          Get-ChildItem "electron/assets/models/" -ErrorAction SilentlyContinue
          exit 1
        }
        Write-Host "Shape predictor file found successfully"
        Write-Host "File size: $((Get-Item 'electron/assets/models/shape_predictor_68_face_landmarks.dat').Length) bytes"
        
    - name: Build application
      run: npm run build
      env:
        CI: true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: screenblink-windows
        path: |
          dist/
          dist-electron/
        retention-days: 30
        
    - name: Upload installer
      uses: actions/upload-artifact@v4
      with:
        name: screenblink-installer-windows
        path: |
          dist/*.exe
          dist/*.zip
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.11.0'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13.3'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Python dependencies
      run: |
        cd python
        python3 -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
        cd ..
        
    - name: Verify shape predictor file exists
      run: |
        if [ ! -f "electron/assets/models/shape_predictor_68_face_landmarks.dat" ]; then
          echo "Shape predictor file not found!"
          echo "Current directory: $(pwd)"
          echo "Contents of electron/assets/models/:"
          ls -la electron/assets/models/ || true
          exit 1
        fi
        echo "Shape predictor file found successfully"
        echo "File size: $(stat -f%z electron/assets/models/shape_predictor_68_face_landmarks.dat) bytes"
        
    - name: Build application
      run: npm run build:mac
      env:
        CI: true
        
    - name: Remove quarantine attributes
      run: npm run remove-quarantine:dmg
        
    - name: List DMG contents for debugging
      run: |
        echo "=== DMG Contents Debug Info ==="
        echo "Available DMG files:"
        ls -la dist/*.dmg || echo "No DMG files found"
        
        echo -e "\n=== Mounting and listing DMG contents ==="
        for dmg in dist/*.dmg; do
          if [ -f "$dmg" ]; then
            echo "Mounting: $dmg"
            hdiutil attach "$dmg" -readonly
            # Get the actual mount point more reliably
            mount_point=$(hdiutil info | grep "/Volumes/" | grep -v "GUID_partition_scheme" | tail -1 | awk '{print $NF}')
            if [ -n "$mount_point" ] && [ -d "$mount_point" ]; then
              echo "Mounted at: $mount_point"
              echo "Contents:"
              find "$mount_point" -type f | head -20
              echo -e "\nApp bundle contents:"
              find "$mount_point" -name "*.app" -exec find {} -type f \; | head -20
              echo -e "\nPython directory contents:"
              find "$mount_point" -path "*/python/*" -type f | head -10
              echo -e "\nModel files:"
              find "$mount_point" -name "*.dat" -o -name "*.model" | head -10
              echo -e "\nDirectory structure:"
              ls -la "$mount_point"
              hdiutil detach "$mount_point"
            else
              echo "Failed to get valid mount point"
              echo "Available volumes:"
              hdiutil info | grep "/Volumes/"
              # Try to detach any mounted volumes
              hdiutil detach /Volumes/ScreenBlink* 2>/dev/null || true
            fi
          fi
        done
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: screenblink-macos
        path: |
          dist/
          dist-electron/
        retention-days: 30
        
    - name: Upload DMG and ZIP
      uses: actions/upload-artifact@v4
      with:
        name: screenblink-installer-macos
        path: |
          dist/*.dmg
          dist/*.zip
        retention-days: 30 